package main

import (
	"flag"
	"log"
	"math/rand"
	"os"
	"time"

	cmpp "github.com/bigwhite/gocmpp"
)

var (
	maxDelay int // Maximum delay in seconds (configurable via command line)
)

// ConnAuthHandler handles CMPP connection authentication
type ConnAuthHandler struct{}

func (h *ConnAuthHandler) ServeCmpp(r *cmpp.Response, p *cmpp.Packet, l *log.Logger) (bool, error) {
	switch p.Packer.(type) {
	case *cmpp.CmppConnReqPkt:
		// Accept all connection requests with Status = 0 (success)
		switch rsp := r.Packer.(type) {
		case *cmpp.Cmpp3ConnRspPkt:
			rsp.Status = 0
			rsp.AuthIsmg = "simulator"
			rsp.Version = 0x30
			l.Println("[ConnAuth] CMPP 3.0 connection accepted")
		case *cmpp.Cmpp2ConnRspPkt:
			rsp.Status = 0
			l.Println("[ConnAuth] CMPP 2.0 connection accepted")
		}
	}
	return true, nil // continue to next handler
}

// SubmitHandler handles CMPP submit requests
type SubmitHandler struct {
	msgIdCounter uint64
}

func (h *SubmitHandler) ServeCmpp(r *cmpp.Response, p *cmpp.Packet, l *log.Logger) (bool, error) {
	switch req := p.Packer.(type) {
	case *cmpp.Cmpp3SubmitReqPkt:
		rsp := r.Packer.(*cmpp.Cmpp3SubmitRspPkt)

		// Log the incoming request first
		l.Printf("[Submit] CMPP 3.0 Submit Request: PkTotal=%d, PkNumber=%d, DestTerminalId=%s, MsgContent=%s\n",
			req.PkTotal, req.PkNumber, req.DestTerminalId, string(req.MsgContent))

		// Random delay between 1s and maxDelay to simulate processing time
		delayMs := 1000 + rand.Intn(maxDelay*1000)
		delay := time.Duration(delayMs) * time.Millisecond
		l.Printf("[Submit] Simulating processing delay: %v\n", delay)
		time.Sleep(delay)

		// Generate a unique MsgId (8 bytes)
		h.msgIdCounter++
		timestamp := uint64(time.Now().Unix())
		msgId := (timestamp << 32) | h.msgIdCounter
		rsp.MsgId = msgId
		rsp.Result = 0 // 0 = success

		l.Printf("[Submit] Response: MsgId=%d, Result=0 (success)\n", msgId)

	case *cmpp.Cmpp2SubmitReqPkt:
		rsp := r.Packer.(*cmpp.Cmpp2SubmitRspPkt)

		// Log the incoming request first
		l.Printf("[Submit] CMPP 2.0 Submit Request: DestTerminalId=%s\n", req.DestTerminalId)

		// Random delay between 1s and maxDelay to simulate processing time
		delayMs := 1000 + rand.Intn(maxDelay*1000)
		delay := time.Duration(delayMs) * time.Millisecond
		l.Printf("[Submit] Simulating processing delay: %v\n", delay)
		time.Sleep(delay)

		// Generate a unique MsgId
		h.msgIdCounter++
		timestamp := uint64(time.Now().Unix())
		msgId := (timestamp << 32) | h.msgIdCounter
		rsp.MsgId = msgId
		rsp.Result = 0

		l.Printf("[Submit] Response: MsgId=%d, Result=0 (success)\n", msgId)
	}
	return true, nil
}

// ActiveTestHandler handles CMPP active test (heartbeat)
type ActiveTestHandler struct{}

func (h *ActiveTestHandler) ServeCmpp(r *cmpp.Response, p *cmpp.Packet, l *log.Logger) (bool, error) {
	switch p.Packer.(type) {
	case *cmpp.CmppActiveTestReqPkt:
		// Response is automatically generated by the server
		l.Println("[Heartbeat] Active test request received, responding...")
	case *cmpp.CmppActiveTestRspPkt:
		l.Println("[Heartbeat] Active test response received")
	}
	return true, nil
}

// TerminateHandler handles CMPP terminate requests
type TerminateHandler struct{}

func (h *TerminateHandler) ServeCmpp(r *cmpp.Response, p *cmpp.Packet, l *log.Logger) (bool, error) {
	switch p.Packer.(type) {
	case *cmpp.CmppTerminateReqPkt:
		l.Println("[Terminate] Client requested to close connection")
	}
	return false, nil // don't continue, close connection
}

func main() {
	// Parse command line flags
	flag.IntVar(&maxDelay, "delay", 3, "Maximum delay in seconds for submit response (1-30, default: 3)")
	flag.Parse()

	// Validate delay parameter
	if maxDelay < 1 || maxDelay > 30 {
		log.Fatalf("Invalid delay value: %d. Must be between 1 and 30 seconds", maxDelay)
	}

	// Server configuration
	addr := "127.0.0.1:7891" // Default CMPP port
	typ := cmpp.V30          // CMPP 3.0 protocol
	t := 30 * time.Second    // Active test interval
	n := int32(3)            // Max no-response count before disconnect

	// Seed random for delay simulation
	rand.Seed(time.Now().UnixNano())

	// Create handlers
	handlers := []cmpp.Handler{
		&ConnAuthHandler{},
		&SubmitHandler{},
		&ActiveTestHandler{},
		&TerminateHandler{},
	}

	log.Printf("==========================================")
	log.Printf("CMPP 3.0 Simulator Server")
	log.Printf("==========================================")
	log.Printf("Listening on: %s", addr)
	log.Printf("Protocol: CMPP 3.0")
	log.Printf("Heartbeat interval: %v", t)
	log.Printf("Submit delay: 1s - %ds (random)", maxDelay)
	log.Printf("==========================================")
	log.Printf("Ready to accept connections...")
	log.Printf("")

	// Start the server
	err := cmpp.ListenAndServe(addr, typ, t, n, os.Stdout, handlers...)
	if err != nil {
		log.Fatalf("Server error: %v", err)
	}
}
